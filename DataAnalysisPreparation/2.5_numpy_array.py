# 2.5_数组
# 用Python做数据分析离不开两个最常用的库，NumPy和Pandas
# NumPy的全程叫Numerical Python,  是专门针对计算用的，NumPy是很多数据或科学相关Python包的基础，包括马上要学到的pandas

import numpy as np
# "as np"的意思是，给这个库一个别名叫np，这样使用这个库的任何东西时，都可以用np，而不是numpy来调用
# 目的是打字更少、更简洁

# 一、N维数组(ND array)
# NumPy里最核心的数据结构叫ND array，
# (一)、NumPy的数组与Python的内置列表
# 1.相似之处
arr = np.array([5, 17, 3, 26, 31])
# 1）都可以通过索引去获得某个元素
print(arr[0])
# 2)都可以通过切片获得某范围的多个元素
# 打印第1个到第4个之前元素
print(arr[0:3])
# 3)可以去迭代各个元素
for element in arr:
    print(element)
# 2.不同之处
# NumPy数组里的数据类型需要统一，而列表里的数据类型不需要统一
lst = [5, "a", True, 12.2, "!"]
# 3.优点
# 1）在对NumPy数组进行大规模数学运算或其它操作时，执行速度远高于Python内置列表，
# 因此效率是数据处理方面选择NumPy的首要原因
# 2）NumPy提供了很多专门做运算的函数，为操 作数据提供了很多便利

# 二、安装和使用NumPy
# 1.安装NumPy
# 在CMD，输入"pip install numpy"，进入JN
# 2.导入NumPy
# "import numpy as np"

# 三、创建数组
# (一)、array方法
# 1.创建一个数组，最直观的方法就是通过NumPy的array方法，把列表转换成数组
# 2.如果传入的是"[1, 2, 3]"这样一个简单的列表，它会被转换成一维数组；
# 如果传入的是"[[1, 2, 3], [4, 5, 6]]"这样一个嵌套列表，也就是一个列表里面有另一个列表的情况，它会被转换成二维数组
# 一个简单的判断方法是，最左边有几个方括号，它就会被转换成几维的数组
# 3.这里也可以试一下传入不同类型的元素，虽然不报错，但array方法会强制把它们转换成同一类型
# (二)、其他方法
# 1.zeros方法
# 给zeros方法传入一个数字，会返回一个全部是0的，长度为那个数字的数组
np.zeros(3)
# 会返回array([0., 0., 0.,])。由于数字类型是浮点数，所以每个数字后面有个小数点
# 2.ones方法
# 给ones方法传入一个数字，会返回一个全部是1的，长度为那个数字的数组
np.ones(3)
# 会返回array([1., 1., 1.,])
# 3.arange方法  表示是针对array的range方法
# 里面传入的参数和range是一样的，第一个表示起始值，第二个表示结束值，第三个表示步长
# *和range方法一样，结束值不会被包括在范围内
np.arange(5, 11, 2)
# 会返回array([5, 7, 9])

arr2 = np.array([[1, 2, 3], [4, 5, 6]])

# 四、数组的属性
# 1.ndim会返回给我们数组的维度
print(arr.ndim)
# 2.shape会返回一个元组，表示各个维度的元素的个数
print(arr.shape)
# 因为arr是一维数组，第一个维度有5个元素，所以会打印"(5,)"
# *如果元组里面只有一个元素，它会用元素后面的逗号，来强调这是由一个元素组成的元组
print(arr2.shape)  # 因为arr2是二维数组，第一个维度有2个元素，第二个维度有3个元素，所以会打印"(2, 3)"的元组
# 3.size会返回数组里面元素的总个数
print(arr.size)
# 4.dtype会返回数组元素的类型，dtype表达的是data type的意思
print(arr.dtype)
# 会打印"int32"，int开头说明类型是整数，32表示的是比特长度
