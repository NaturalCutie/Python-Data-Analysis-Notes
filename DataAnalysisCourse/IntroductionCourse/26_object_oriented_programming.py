# 26_面向对象编程
# 一、面向过程编程vs面向对象编程
# （一）、面向过程编程
# 1.过程是负责完成某个具体任务的代码，基本可以理解为函数。
# 2.面向过程编程的核心，就是把要实现的事情拆分成一个个步骤，依次完成。
"""
例1：写个ATM的程序，要往里面依次存入50块和取出100块，
# 那就按照顺序写出这些步骤，并配合定义出存钱和取钱的函数
*假如要记录步骤中更多性质，将性质作为参数补充
def 存钱(面值):
...
def 取钱(面值):
...


存钱(50)
取钱(100)
------------------------------------------------------------------------------------------------------
例2：写个ATM的程序，要往里面依次存入50块和取出100块。但要记录ATM编号，银行，纸币编号，支行，发行年份等性质。
def 存钱(面值, ATM编号, 银行, 纸币编号, 支行, 发行年份):
...
def 取钱(面值, ATM编号, 银行, 纸币编号, 支行, 发行年份):
...


存钱(50, "001", "招商银行", "AA00000000", "南园支行", "2015")
取钱(100, "002", "中国银行", "AA00000001", "北园支行", "2020")
*可以看出对这个例题的情况，面向过程编程，一方面会增加函数参数的数量；
另一方面，ATM有编号，纸币也有编号，这些数据在传参过程中混在一起，不利于理解，
随着程序长度和逻辑复杂度的增加，代码的清晰度可能由此降低。
"""

# （二）、面向对象编程及其基础语法
# 1.以对象为核心，先考虑各个对象有什么性质、能做什么事情
# 比如：每个ATM机都有自己的性质，包括编号、银行、支行。那么我们可以提取出这些性质，定义ATM类，然后用类创建对象。
# 2.类与对象的关系
# 类是创建对象的模板，对象是类的实例。
# 3，属性
# 如编号、银行、支行是不同ATM对象的属性
"""
# 定义ATM类
class ATM:
    def __init__(self, 编号, 银行, 支行):
        self.编号 = 编号
        self.银行 = 银行
        self.支行 = 支行


# 创建两个ATM对象
atm1 = ATM("001", "招商银行", "南园支行")
atm2 = ATM("002", "中国银行", "北园支行")       


# 定义纸币类
class 纸币:
    def __init__(self, 编号, 面值, 发行年份):
        self.编号 = 编号
        self.面值 = 面值
        self.发行年份 = 发行年份
        

# 创建两个纸币对象
纸币1 = 纸币("AA00000000", 50, "2015")
纸币2 = 纸币("AA00000001", 100, "2020")
"""

# 4.1）对象可以直接作为参数，传入函数中，减少函数参数的数量
"""
def 存钱(ATM对象, 纸币对象):
...
def 取钱(ATM对象, 纸币对象):
...


存钱(atm1, 纸币1)
取钱(atm2, 纸币2)
"""
# 4.2）用对象把相关属性绑定在一起，让程序逻辑更加清晰，让人更清楚性质所属的对象是什么
"""
# 比如虽然ATM和纸币都有编号，但我们用"atm1.编号"，获取属于atm1的编号；用"纸币1.编号"，获取属于纸币1的编号。
print(atm1.编号)
print(纸币1，编号)
"""

# 5.除属性外，另外能和对象绑定的是方法。
# 属性对应对象拥有的性质，而方法对应对象能做些什么。
# 所谓属性就是放在类里面的变量，所谓方法就是放在类里面的函数。
"""
# *执行洗衣服的任务
# 面向过程编程
def 放(被放的物品, 放入的物品):
...
def 开机(机器):
...
def 清洗(需清洗的物品):
...
def 烘干(需烘干的物品):
...


放("衣服", "洗衣机")
放("洗衣粉", "洗衣机")
开机("洗衣机")
清洗("衣服")
烘干("衣服")
---------------------------------------------------------------------
# 面向对象编程
# 人、洗衣机是执行事务的对象。
# 人能放东西和开机，洗衣机能清洗和烘干，这些可以作为类的方法被定义
class 人:
    def 放(self, 被放的物品, 放入的物品):
        ...
    def 开机(self, 机器):
        ...
class 洗衣机:
    def 清洗(self, 需清洗的物品):
        ...
    def 烘干(self, 需烘干的物品):
        ...


# 定义好类之后，就可以通过类来创建对象
# *因为我这个对象没有性质，所以括号是空的
我 = 人()
我的洗衣机 = 洗衣机()

# 用对象去执行方法 
我.放("衣服", 我的洗衣机)
我.放("洗衣粉", 我的洗衣机)
我.开机(我的洗衣机)
我的洗衣机.清洗("衣服")
我的洗衣机.烘干("衣服")
"""

# 6.方法中用到自身属性，这个信息不需要作为参数被传入，而是可以直接被获取到
"""
# 比如洗衣机的方法需要用到容量这个信息
class 洗衣机:
    def __init__(self, 容量):
        self.容量 = 容量
    def 清洗(self, 需清洗的物品):
        洗衣机容量 = self.容量
        ...
    def 烘干(self, 需烘干的物品):
        洗衣机容量 = self.容量
        ...
"""

# 7.面向过程是编年体，面向对象是纪传体

# 三、面向对象编程的特性
# （一）、封装
# 封装表示，写类的人，将内部实现细节隐藏起来，使用类的人，只通过外部接口访问和使用
# 比如有人写好了洗衣机这个类，其实你只需要知道它有什么方法，方法有什么作用，具体怎么用就足够了，
# 不需要知道方法里面具体是怎么写的
"""
class 洗衣机:
    def __init__(self, 容量):
        ***
    def 清洗(self, 需清洗的物品):
        ***
    def 烘干(self, 需烘干的物品):
        ***
"""

# （二）、继承
# 继承是在说：面向对象编程允许创建有层次的类，即类可以有子类和父类，来表示从属关系
# 这样做的好处是父类的属性、方法都可以被继承，不需要反复定义，减少代码的冗余
# 比如小学生、大学生都是学生，都应该有学号、年级的属性，都要去学校
# 可以创建出一个叫学生的父类，然后让小学生和大学生去继承这个类

# （三）、多态
# 多态是指，同样的接口，由于对象具体类的不同，而有不同的表现
# 比如虽然小学生和大学生都要写作业，但内容肯定不一样
# 所以写作业的方法，就不能直接定义在父类里面，而是要分别定义在子类里
# 调用写作业方法时，统一调用同一名称的方法，而他们会由于所属类不同，执行不同的写作业方法
"""
class 学生:
    def __init__(self, 学号, 年级):
        self.学号 = 学号
        self.年级 = 年级
    def 去学校(self, 学校):
        ...
class 小学生(学生):
    def 写作业(self):
        # 写简单作业
        ...
class 大学生(学生):
    def 写作业(self):
        # 写困难作业
        ...


小崽 = 小学生("0331", "小六")
大崽 = 大学生("1007", "大一")
我家崽们 = [大崽, 小崽]
for 崽 in 我家崽们:
    崽.写作业()
"""

# 综上，不是说面向对象就一定优于面向过程，选择哪个，还是取决于具体场景、具体需求。
