# 31_文件操作|读文件
# -如果需要一个程序来帮忙计算销售数据，一种方法是根据数据文件，把数据一条条复制到代码里面，然后通过执行代码来获得结果
# -如果学会了文件操作，就可以让同一段代码，读取不同的市场数据文件，只需要对文件名进行改动即可

# 用Python读文件的第一步操作，得是先打开目标文件
# 一、打开文件
# 1.用open函数，里面放上文件路径，
# 2.第二个参数是模式，模式是一个字符串
# 常见的模式包括：
# 1）"r"，表示读取模式
# 2）"w"，表示写入模式
# *第二个参数不写，默认为读取模式
# *在读取模式下，文件路径不存在的话，就会报一个叫FileNotFoundError的错误，提示文件不存在
# 3.open函数还有一个可选参数叫encoding，表示编码方式
# 文件一般编码方式是UTF-8
# open函数默认的encoding是跟随系统的
# 这个参数传入UTF-8的值，就会用这个编码来读取文件
# 4.open函数执行成功，会返回一个文件对象，可以后续对它进行读取或写入操作
# f = open("相对路径或绝对路径", "r", encoding="utf-8")
# *相对路径是相对于当前这个代码文件而言，我们要读的文件和它处于什么位置

# 二、读文件
# 用方法读文件，是因为open函数返回的是对象
# （一）、read方法
# 1.调用后，会一次性读取文件里面所有内容,并以字符串形式进行返回
# 2.由于程序其实会记录那个文件读到哪个位置了，再次调用read方法，会发现返回的结果为空
# *一般用代码操作的文件格式，都是简单直接的，
# 以文本格式为例：代码喜欢txt这种纯文本，可以直接把里面内容转换为字符串，而不是word这种还有各种格式，很有可以读出问题
# *在文件特别大的情况下，最好不要用read，因为读出来的内容会占用内存
f = open("31_data.txt", "r", encoding="utf-8")
print(f.read())  # 会读全部的文件内容
print(f.read())  # 会读空字符串

# 3.如果不想一次性读完整个文件，可以给read传一个数字，表示读多少字节，下一次调用read时，会从那个位置继续往下读
f = open("31_data.txt", "r", encoding="utf-8")
print(f.read(10))  # 会读第1-10个字节的文件内容
print(f.read(10))  # 会读第11-20个字节的文件内容

# （二）、readline方法
# 1.调用后，只会读取文件一行的内容，并以字符串形式进行返回；下一次调用，就读下一行
# 会根据换行符来判断什么时候算本行结尾，而且换行符也会被当成读到的内容的一部分
f = open("31_data.txt", "r", encoding="utf-8")
print(f.readline())  # 会读一行文件内容
print(f.readline())  # 会读一行文件内容
# 这里运行结果会有额外的空行，原因是readline会把每行的换行符给读到，同时print本身默认结尾换行

# 2.由于一般文件行数未知，且读到结尾，readline方法和read方法一样会返回空字符串
# 所以一般用while循环，判断只要返回不是空字符串，就继续读下一行
f = open("31_data.txt", "r", encoding="utf-8")
line = f.readline()  # 读第一行
while line != "":  # 判断当前行是否为空
    print(line)  # 不为空则打印当前行
    line = f.readline()  # 读取下一行

# （三）、readlines方法
# readlines会读取全部文件内容，并返回由每行组成的字符串列表，所以一般和for循环结合
f = open("31_data.txt", "r", encoding="utf-8")
print(f.readlines())

f = open("31_data.txt", "r", encoding="utf-8")
lines = f.readlines()  # 把每行内容储存到列表里
for line in lines:  # 遍历每行内容
    print(line)  # 打印当前行
# *readlines方法也可以直接放在for循环中

# 三、关闭文件
# （一）、close方法
# 调用后该文件对象就会释放系统资源，所以每次完成文件读写操作后，都应该关闭文件
f = open("31_data.txt", "r", encoding="utf-8")
print(f.read())
f.close()  # 关闭文件，释放资源

# （二）、with关键字
# 1.with open函数 as 文件对象名:
# 2.缩进的代码块里，放上对该文件对象的操作；在缩进的内容执行完毕后，文件就会被自动关闭
# 3.这种写法能让代码更加剪接，也不需要单独调用close方法了
with open("31_data.txt") as f:
    print(f.read())

# 四、创建文件
# 1.用Windows系统自带的记事本或macOS自带的文本编辑
# 2.在代码编辑器里，新建文件，后缀用.txt，表示是纯文本
